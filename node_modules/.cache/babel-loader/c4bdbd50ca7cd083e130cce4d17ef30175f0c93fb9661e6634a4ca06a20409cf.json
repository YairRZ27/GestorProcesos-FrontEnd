{"ast":null,"code":"const API_BASE_URL = '/api';\nexport async function apiLogin(email, password) {\n  const response = await fetch(`${API_BASE_URL}/auth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: new URLSearchParams({\n      username: email,\n      password\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}\nexport async function apiRegister(email, password) {\n  const response = await fetch(`${API_BASE_URL}/users/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}\nexport async function apiGetUserProfile(token) {\n  const response = await fetch(`${API_BASE_URL}/users/me`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    if (response.status === 401) {\n      localStorage.removeItem('authToken');\n      throw new Error('Sesi칩n inv치lida o expirada.');\n    }\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}","map":{"version":3,"names":["API_BASE_URL","apiLogin","email","password","response","fetch","method","headers","body","URLSearchParams","username","ok","errorData","json","catch","detail","Error","status","apiRegister","JSON","stringify","apiGetUserProfile","token","localStorage","removeItem"],"sources":["C:/Users/YairRz/Documents/GestorProcesos/Frontend/gestorprocesos/src/api/auth.js"],"sourcesContent":["const API_BASE_URL = '/api';\r\n\r\nexport async function apiLogin(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/auth/token`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n        body: new URLSearchParams({ username: email, password }),\r\n    });\r\n    if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\nexport async function apiRegister(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/users/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n    });\r\n    if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\nexport async function apiGetUserProfile(token) {\r\n    const response = await fetch(`${API_BASE_URL}/users/me`, {\r\n        headers: { 'Authorization': `Bearer ${token}` },\r\n    });\r\n    if (!response.ok) {\r\n        if (response.status === 401) {\r\n            localStorage.removeItem('authToken');\r\n            throw new Error('Sesi칩n inv치lida o expirada.');\r\n        }\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAM;AAE3B,OAAO,eAAeC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,aAAa,EAAE;IACvDM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC,CAAC;IAChEC,IAAI,EAAE,IAAIC,eAAe,CAAC;MAAEC,QAAQ,EAAER,KAAK;MAAEC;IAAS,CAAC;EAC3D,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,MAAM,EAAE;IAAmC,CAAC,CAAC,CAAC;IACrG,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,MAAM,IAAI,SAASX,QAAQ,CAACa,MAAM,EAAE,CAAC;EACnE;EACA,OAAOb,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B;AAEA,OAAO,eAAeK,WAAWA,CAAChB,KAAK,EAAEC,QAAQ,EAAE;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB,EAAE;IAC3DM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEW,IAAI,CAACC,SAAS,CAAC;MAAElB,KAAK;MAAEC;IAAS,CAAC;EAC5C,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,MAAM,EAAE;IAAmC,CAAC,CAAC,CAAC;IACrG,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,MAAM,IAAI,SAASX,QAAQ,CAACa,MAAM,EAAE,CAAC;EACnE;EACA,OAAOb,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B;AAEA,OAAO,eAAeQ,iBAAiBA,CAACC,KAAK,EAAE;EAC3C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,WAAW,EAAE;IACrDO,OAAO,EAAE;MAAE,eAAe,EAAE,UAAUe,KAAK;IAAG;EAClD,CAAC,CAAC;EACF,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE;IACd,IAAIP,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;MACzBM,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;MACpC,MAAM,IAAIR,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,MAAMJ,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,MAAM,EAAE;IAAmC,CAAC,CAAC,CAAC;IACrG,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,MAAM,IAAI,SAASX,QAAQ,CAACa,MAAM,EAAE,CAAC;EACnE;EACA,OAAOb,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}