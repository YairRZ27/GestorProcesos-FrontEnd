{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8001'; // Usar la URL base real del backend\n\n// Login: autenticación HTTP Basic, obtiene usuario si las credenciales son correctas\nexport async function apiLogin(email, password) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/login`, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${email}:${password}`)\n    }\n  });\n  let user;\n  try {\n    user = await response.json();\n  } catch {\n    user = {};\n  }\n  if (!response.ok) {\n    throw new Error(user.detail || `Error ${response.status}`);\n  }\n  // Cambia la validación aquí:\n  if (!user || !user.idUsuario && !user._id) {\n    throw new Error('Credenciales incorrectas');\n  }\n  // Guarda el userId para futuras consultas\n  localStorage.setItem('userId', user.idUsuario || user._id);\n  // Guarda el token (email:password en base64)\n  localStorage.setItem('authToken', btoa(`${email}:${password}`));\n  return user;\n}\n\n// Registro: crea usuario nuevo\nexport async function apiRegister(email, password) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      nombre: email.split('@')[0],\n      correo: email,\n      password: password,\n      estatus: true,\n      rol: 'general'\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}\n\n// Perfil: obtiene datos del usuario autenticado\nexport async function apiGetUserProfile(token) {\n  const userId = localStorage.getItem('userId');\n  if (!userId) throw new Error('No hay usuario autenticado');\n  const response = await fetch(`${API_BASE_URL}/usuarios/${userId}/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) {\n    if (response.status === 401) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userId');\n      throw new Error('Sesión inválida o expirada.');\n    }\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}","map":{"version":3,"names":["API_BASE_URL","apiLogin","email","password","response","fetch","method","headers","btoa","user","json","ok","Error","detail","status","idUsuario","_id","localStorage","setItem","apiRegister","body","JSON","stringify","nombre","split","correo","estatus","rol","errorData","catch","apiGetUserProfile","token","userId","getItem","removeItem"],"sources":["C:/Users/YairRz/Documents/GestorProcesos/Frontend/gestorprocesos/src/api/auth.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8001'; // Usar la URL base real del backend\r\n\r\n// Login: autenticación HTTP Basic, obtiene usuario si las credenciales son correctas\r\nexport async function apiLogin(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/login`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Basic ' + btoa(`${email}:${password}`),\r\n        },\r\n    });\r\n\r\n    let user;\r\n    try {\r\n        user = await response.json();\r\n    } catch {\r\n        user = {};\r\n    }\r\n\r\n    if (!response.ok) {\r\n        throw new Error(user.detail || `Error ${response.status}`);\r\n    }\r\n    // Cambia la validación aquí:\r\n    if (!user || (!user.idUsuario && !user._id)) {\r\n        throw new Error('Credenciales incorrectas');\r\n    }\r\n    // Guarda el userId para futuras consultas\r\n    localStorage.setItem('userId', user.idUsuario || user._id);\r\n    // Guarda el token (email:password en base64)\r\n    localStorage.setItem('authToken', btoa(`${email}:${password}`));\r\n    return user;\r\n}\r\n\r\n// Registro: crea usuario nuevo\r\nexport async function apiRegister(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            nombre: email.split('@')[0],\r\n            correo: email,\r\n            password: password,\r\n            estatus: true,\r\n            rol: 'general'\r\n        }),\r\n    });\r\n    if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\n// Perfil: obtiene datos del usuario autenticado\r\nexport async function apiGetUserProfile(token) {\r\n    const userId = localStorage.getItem('userId');\r\n    if (!userId) throw new Error('No hay usuario autenticado');\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/${userId}/`, {\r\n        headers: {\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n        if (response.status === 401) {\r\n            localStorage.removeItem('authToken');\r\n            localStorage.removeItem('userId');\r\n            throw new Error('Sesión inválida o expirada.');\r\n        }\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}