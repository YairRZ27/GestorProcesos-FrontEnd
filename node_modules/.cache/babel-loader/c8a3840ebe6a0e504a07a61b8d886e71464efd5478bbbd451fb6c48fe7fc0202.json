{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8001'; // Usar la URL base real del backend\n\n// Login: autenticación HTTP Basic, obtiene usuario si las credenciales son correctas\nexport async function apiLogin(email, password) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/login`, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${email}:${password}`)\n    }\n  });\n  let user;\n  try {\n    user = await response.json();\n  } catch {\n    user = {};\n  }\n  console.log('Respuesta del backend:', user);\n  if (!response.ok) {\n    throw new Error(user.mensaje || user.detail || `Error ${response.status}`);\n  }\n  // Ahora valida el campo correcto\n  if (!user || !user.usuario || !user.usuario._id) {\n    throw new Error('Credenciales incorrectas');\n  }\n  // Guarda el userId para futuras consultas\n  localStorage.setItem('userId', user.usuario._id); //\n  // Guarda el token (email:password en base64)\n  localStorage.setItem('authToken', btoa(`${email}:${password}`)); //\n  return user.usuario;\n}\n\n// Registro: crea usuario nuevo\nexport async function apiRegister(email, password) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/`, {\n    //\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      nombre: email.split('@')[0],\n      //\n      correo: email,\n      //\n      password: password,\n      //\n      estatus: true,\n      //\n      rol: 'general' //\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}\n\n// Perfil: obtiene datos del usuario autenticado\nexport async function apiGetUserProfile(token) {\n  const userId = localStorage.getItem('userId'); //\n  if (!userId) throw new Error('No hay usuario autenticado'); //\n  const response = await fetch(`${API_BASE_URL}/usuarios/${userId}/`, {\n    //\n    headers: {\n      'Authorization': 'Basic ' + token //\n    }\n  });\n  if (!response.ok) {\n    if (response.status === 401) {\n      //\n      localStorage.removeItem('authToken'); //\n      localStorage.removeItem('userId'); //\n      throw new Error('Sesión inválida o expirada.'); //\n    }\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}","map":{"version":3,"names":["API_BASE_URL","apiLogin","email","password","response","fetch","method","headers","btoa","user","json","console","log","ok","Error","mensaje","detail","status","usuario","_id","localStorage","setItem","apiRegister","body","JSON","stringify","nombre","split","correo","estatus","rol","errorData","catch","apiGetUserProfile","token","userId","getItem","removeItem"],"sources":["C:/Users/YairRz/Documents/GestorProcesos/Frontend/gestorprocesos/src/api/auth.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8001'; // Usar la URL base real del backend\r\n\r\n// Login: autenticación HTTP Basic, obtiene usuario si las credenciales son correctas\r\nexport async function apiLogin(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/login`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Basic ' + btoa(`${email}:${password}`),\r\n        },\r\n    });\r\n\r\n    let user;\r\n    try {\r\n        user = await response.json();\r\n    } catch {\r\n        user = {};\r\n    }\r\n\r\n    console.log('Respuesta del backend:', user);\r\n\r\n    if (!response.ok) {\r\n        throw new Error(user.mensaje || user.detail || `Error ${response.status}`);\r\n    }\r\n    // Ahora valida el campo correcto\r\n    if (!user || !user.usuario || !user.usuario._id) {\r\n        throw new Error('Credenciales incorrectas');\r\n    }\r\n    // Guarda el userId para futuras consultas\r\n    localStorage.setItem('userId', user.usuario._id); //\r\n    // Guarda el token (email:password en base64)\r\n    localStorage.setItem('authToken', btoa(`${email}:${password}`)); //\r\n    return user.usuario;\r\n}\r\n\r\n// Registro: crea usuario nuevo\r\nexport async function apiRegister(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/`, { //\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            nombre: email.split('@')[0], //\r\n            correo: email, //\r\n            password: password, //\r\n            estatus: true, //\r\n            rol: 'general' //\r\n        }),\r\n    });\r\n    if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\n// Perfil: obtiene datos del usuario autenticado\r\nexport async function apiGetUserProfile(token) {\r\n    const userId = localStorage.getItem('userId'); //\r\n    if (!userId) throw new Error('No hay usuario autenticado'); //\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/${userId}/`, { //\r\n        headers: {\r\n            'Authorization': 'Basic ' + token, //\r\n        },\r\n    });\r\n    if (!response.ok) {\r\n        if (response.status === 401) { //\r\n            localStorage.removeItem('authToken'); //\r\n            localStorage.removeItem('userId'); //\r\n            throw new Error('Sesión inválida o expirada.'); //\r\n        }\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C;AACA,OAAO,eAAeC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB,EAAE;IAC3DM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAAC,GAAGN,KAAK,IAAIC,QAAQ,EAAE;IAC3D;EACJ,CAAC,CAAC;EAEF,IAAIM,IAAI;EACR,IAAI;IACAA,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,MAAM;IACJD,IAAI,GAAG,CAAC,CAAC;EACb;EAEAE,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,IAAI,CAAC;EAE3C,IAAI,CAACL,QAAQ,CAACS,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAACL,IAAI,CAACM,OAAO,IAAIN,IAAI,CAACO,MAAM,IAAI,SAASZ,QAAQ,CAACa,MAAM,EAAE,CAAC;EAC9E;EACA;EACA,IAAI,CAACR,IAAI,IAAI,CAACA,IAAI,CAACS,OAAO,IAAI,CAACT,IAAI,CAACS,OAAO,CAACC,GAAG,EAAE;IAC7C,MAAM,IAAIL,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA;EACAM,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEZ,IAAI,CAACS,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;EAClD;EACAC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEb,IAAI,CAAC,GAAGN,KAAK,IAAIC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;EACjE,OAAOM,IAAI,CAACS,OAAO;AACvB;;AAEA;AACA,OAAO,eAAeI,WAAWA,CAACpB,KAAK,EAAEC,QAAQ,EAAE;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,YAAY,EAAE;IAAE;IACxDM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,MAAM,EAAExB,KAAK,CAACyB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAE;MAC7BC,MAAM,EAAE1B,KAAK;MAAE;MACfC,QAAQ,EAAEA,QAAQ;MAAE;MACpB0B,OAAO,EAAE,IAAI;MAAE;MACfC,GAAG,EAAE,SAAS,CAAC;IACnB,CAAC;EACL,CAAC,CAAC;EACF,IAAI,CAAC1B,QAAQ,CAACS,EAAE,EAAE;IACd,MAAMkB,SAAS,GAAG,MAAM3B,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACsB,KAAK,CAAC,OAAO;MAAEhB,MAAM,EAAE;IAAmC,CAAC,CAAC,CAAC;IACrG,MAAM,IAAIF,KAAK,CAACiB,SAAS,CAACf,MAAM,IAAI,SAASZ,QAAQ,CAACa,MAAM,EAAE,CAAC;EACnE;EACA,OAAOb,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeuB,iBAAiBA,CAACC,KAAK,EAAE;EAC3C,MAAMC,MAAM,GAAGf,YAAY,CAACgB,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC/C,IAAI,CAACD,MAAM,EAAE,MAAM,IAAIrB,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;EAC5D,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,aAAamC,MAAM,GAAG,EAAE;IAAE;IAClE5B,OAAO,EAAE;MACL,eAAe,EAAE,QAAQ,GAAG2B,KAAK,CAAE;IACvC;EACJ,CAAC,CAAC;EACF,IAAI,CAAC9B,QAAQ,CAACS,EAAE,EAAE;IACd,IAAIT,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;MAAE;MAC3BG,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;MACtCjB,YAAY,CAACiB,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;MACnC,MAAM,IAAIvB,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;IACpD;IACA,MAAMiB,SAAS,GAAG,MAAM3B,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACsB,KAAK,CAAC,OAAO;MAAEhB,MAAM,EAAE;IAAmC,CAAC,CAAC,CAAC;IACrG,MAAM,IAAIF,KAAK,CAACiB,SAAS,CAACf,MAAM,IAAI,SAASZ,QAAQ,CAACa,MAAM,EAAE,CAAC;EACnE;EACA,OAAOb,QAAQ,CAACM,IAAI,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}