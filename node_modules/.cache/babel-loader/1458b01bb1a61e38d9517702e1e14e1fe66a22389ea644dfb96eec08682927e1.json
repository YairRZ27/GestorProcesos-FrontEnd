{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8001'; // Usar la URL base real del backend\n\n// Login: autenticación HTTP Basic, obtiene usuario si las credenciales son correctas\nexport async function apiLogin(email, password) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/login`, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${email}:${password}`)\n    }\n  });\n  let user;\n  try {\n    user = await response.json();\n  } catch {\n    user = {};\n  }\n  if (!response.ok) {\n    throw new Error(user.mensaje || user.detail || `Error ${response.status}`);\n  }\n  if (!user || !user.usuario || !user.usuario._id) {\n    throw new Error('Credenciales incorrectas');\n  }\n  localStorage.setItem('userId', user.usuario._id);\n  localStorage.setItem('authToken', btoa(`${email}:${password}`));\n  return user.usuario;\n}\n\n// Registro: crea usuario nuevo\nexport async function apiRegister(email, password) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      nombre: email.split('@')[0],\n      correo: email,\n      password: password,\n      estatus: true,\n      rol: 'general'\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}\n\n// Perfil: obtiene datos del usuario autenticado\n// Esta función ESPERA que se le PASE un token válido.\nexport async function apiGetUserProfile(token) {\n  const userId = localStorage.getItem('userId');\n  if (!userId) {\n    throw new Error('No hay usuario autenticado');\n  }\n  const response = await fetch(`${API_BASE_URL}/usuarios/${userId}/`, {\n    headers: {\n      'Authorization': 'Basic ' + token // Correcto: usa el token pasado como argumento\n    }\n  });\n  if (!response.ok) {\n    if (response.status === 401) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userId');\n      throw new Error('Sesión inválida o expirada.');\n    }\n    const errorData = await response.json().catch(() => ({\n      detail: 'Error de red o respuesta no JSON'\n    }));\n    throw new Error(errorData.detail || `Error ${response.status}`);\n  }\n  return response.json();\n}\n\n// ==================== PROCESOS ====================\n\n// Crear proceso\nexport async function apiCrearProceso(proceso, token) {\n  const response = await fetch(`${API_BASE_URL}/procesos/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(proceso)\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Consultar todos los procesos\nexport async function apiConsultarProcesos(token) {\n  const response = await fetch(`${API_BASE_URL}/procesos/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Consultar procesos por prioridad\nexport async function apiConsultarProcesosPorPrioridad(token) {\n  const response = await fetch(`${API_BASE_URL}/procesos/prioridad/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Consultar proceso individual\nexport async function apiConsultarProceso(idProceso, token) {\n  const response = await fetch(`${API_BASE_URL}/procesos/${idProceso}/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Cambiar estado de proceso\nexport async function apiCambiarEstadoProceso(idProceso, cambio, token) {\n  if (!idProceso) throw new Error('ID de proceso inválido');\n  const response = await fetch(`${API_BASE_URL}/procesos/${idProceso}/`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(cambio)\n  });\n  if (!response.ok) {\n    throw new Error('Error al cambiar estado');\n  }\n  return await response.json();\n}\n\n// Eliminar proceso\nexport async function apiEliminarProceso(idProceso, token) {\n  const response = await fetch(`${API_BASE_URL}/procesos/${idProceso}/`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// ==================== SOLICITUDES ====================\n\n// Crear solicitud\nexport async function apiCrearSolicitud(solicitud, token) {\n  const response = await fetch(`${API_BASE_URL}/solicitudes/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(solicitud)\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Consultar todas las solicitudes\nexport async function apiConsultarSolicitudes(token) {\n  const response = await fetch(`${API_BASE_URL}/solicitudes/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Consultar solicitud individual\nexport async function apiConsultarSolicitud(idSolicitud, token) {\n  const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Cambiar estado de solicitud\nexport async function apiCambiarEstadoSolicitud(idSolicitud, cambio, token) {\n  const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(cambio)\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Eliminar solicitud\nexport async function apiEliminarSolicitud(idSolicitud, token) {\n  const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Aprobar solicitud\nexport async function apiAprobarSolicitud(idSolicitud, aprobacion, token) {\n  const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/aprobar`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(aprobacion)\n  });\n  if (!response.ok) return response.json();\n  return response.json();\n}\n\n// ==================== USUARIOS ====================\n\n// Consultar todos los usuarios\nexport async function apiConsultarUsuarios(token) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Consultar usuario individual\nexport async function apiConsultarUsuario(idUsuario, token) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/${idUsuario}/`, {\n    headers: {\n      'Authorization': 'Basic ' + token\n    }\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Cambiar password\nexport async function apiCambiarPassword(idUsuario, cambioPassword, token) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/${idUsuario}/cambiarPassword`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(cambioPassword)\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Cambiar correo\nexport async function apiCambiarCorreo(idUsuario, cambioCorreo, token) {\n  const response = await fetch(`${API_BASE_URL}/usuarios/${idUsuario}/cambiarCorreo`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + token\n    },\n    body: JSON.stringify(cambioCorreo)\n  });\n  if (!response.ok) throw new Error(await response.text());\n  return response.json();\n}\n\n// Ejemplo de guardado correcto tras login exitoso\nconst handleLogin = async () => {\n  // ... tu lógica de autenticación ...\n  // Supón que recibes esto del backend:\n  // { token, nombre, rol }\n  localStorage.setItem('authToken', token);\n  localStorage.setItem('userProfile', JSON.stringify({\n    nombre: nombre,\n    // o el campo que recibas del backend\n    rol: rol // debe ser 'admin' para ver el botón\n  }));\n  // ...redirige o actualiza estado...\n};","map":{"version":3,"names":["API_BASE_URL","apiLogin","email","password","response","fetch","method","headers","btoa","user","json","ok","Error","mensaje","detail","status","usuario","_id","localStorage","setItem","apiRegister","body","JSON","stringify","nombre","split","correo","estatus","rol","errorData","catch","apiGetUserProfile","token","userId","getItem","removeItem","apiCrearProceso","proceso","text","apiConsultarProcesos","apiConsultarProcesosPorPrioridad","apiConsultarProceso","idProceso","apiCambiarEstadoProceso","cambio","apiEliminarProceso","apiCrearSolicitud","solicitud","apiConsultarSolicitudes","apiConsultarSolicitud","idSolicitud","apiCambiarEstadoSolicitud","apiEliminarSolicitud","apiAprobarSolicitud","aprobacion","apiConsultarUsuarios","apiConsultarUsuario","idUsuario","apiCambiarPassword","cambioPassword","apiCambiarCorreo","cambioCorreo","handleLogin"],"sources":["C:/Users/YairRz/Documents/GestorProcesos/Frontend/gestorprocesos/src/api/auth.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8001'; // Usar la URL base real del backend\r\n\r\n// Login: autenticación HTTP Basic, obtiene usuario si las credenciales son correctas\r\nexport async function apiLogin(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/login`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Basic ' + btoa(`${email}:${password}`),\r\n        },\r\n    });\r\n\r\n    let user;\r\n    try {\r\n        user = await response.json();\r\n    } catch {\r\n        user = {};\r\n    }\r\n\r\n    if (!response.ok) {\r\n        throw new Error(user.mensaje || user.detail || `Error ${response.status}`);\r\n    }\r\n\r\n    if (!user || !user.usuario || !user.usuario._id) {\r\n        throw new Error('Credenciales incorrectas');\r\n    }\r\n\r\n    localStorage.setItem('userId', user.usuario._id);\r\n    localStorage.setItem('authToken', btoa(`${email}:${password}`));\r\n    return user.usuario;\r\n}\r\n\r\n// Registro: crea usuario nuevo\r\nexport async function apiRegister(email, password) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            nombre: email.split('@')[0],\r\n            correo: email,\r\n            password: password,\r\n            estatus: true,\r\n            rol: 'general'\r\n        }),\r\n    });\r\n    if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\n// Perfil: obtiene datos del usuario autenticado\r\n// Esta función ESPERA que se le PASE un token válido.\r\nexport async function apiGetUserProfile(token) {\r\n    const userId = localStorage.getItem('userId');\r\n    if (!userId) {\r\n        throw new Error('No hay usuario autenticado');\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/${userId}/`, {\r\n        headers: {\r\n            'Authorization': 'Basic ' + token, // Correcto: usa el token pasado como argumento\r\n        },\r\n    });\r\n\r\n    if (!response.ok) {\r\n        if (response.status === 401) {\r\n            localStorage.removeItem('authToken');\r\n            localStorage.removeItem('userId');\r\n            throw new Error('Sesión inválida o expirada.');\r\n        }\r\n        const errorData = await response.json().catch(() => ({ detail: 'Error de red o respuesta no JSON' }));\r\n        throw new Error(errorData.detail || `Error ${response.status}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\n// ==================== PROCESOS ====================\r\n\r\n// Crear proceso\r\nexport async function apiCrearProceso(proceso, token) {\r\n    const response = await fetch(`${API_BASE_URL}/procesos/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(proceso),\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Consultar todos los procesos\r\nexport async function apiConsultarProcesos(token) {\r\n    const response = await fetch(`${API_BASE_URL}/procesos/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Consultar procesos por prioridad\r\nexport async function apiConsultarProcesosPorPrioridad(token) {\r\n    const response = await fetch(`${API_BASE_URL}/procesos/prioridad/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Consultar proceso individual\r\nexport async function apiConsultarProceso(idProceso, token) {\r\n    const response = await fetch(`${API_BASE_URL}/procesos/${idProceso}/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Cambiar estado de proceso\r\nexport async function apiCambiarEstadoProceso(idProceso, cambio, token) {\r\n    if (!idProceso) throw new Error('ID de proceso inválido');\r\n    const response = await fetch(`${API_BASE_URL}/procesos/${idProceso}/`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(cambio),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Error al cambiar estado');\r\n    }\r\n    return await response.json();\r\n}\r\n\r\n// Eliminar proceso\r\nexport async function apiEliminarProceso(idProceso, token) {\r\n    const response = await fetch(`${API_BASE_URL}/procesos/${idProceso}/`, {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// ==================== SOLICITUDES ====================\r\n\r\n// Crear solicitud\r\nexport async function apiCrearSolicitud(solicitud, token) {\r\n    const response = await fetch(`${API_BASE_URL}/solicitudes/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(solicitud),\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Consultar todas las solicitudes\r\nexport async function apiConsultarSolicitudes(token) {\r\n    const response = await fetch(`${API_BASE_URL}/solicitudes/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Consultar solicitud individual\r\nexport async function apiConsultarSolicitud(idSolicitud, token) {\r\n    const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Cambiar estado de solicitud\r\nexport async function apiCambiarEstadoSolicitud(idSolicitud, cambio, token) {\r\n    const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(cambio),\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Eliminar solicitud\r\nexport async function apiEliminarSolicitud(idSolicitud, token) {\r\n    const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/`, {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Aprobar solicitud\r\nexport async function apiAprobarSolicitud(idSolicitud, aprobacion, token) {\r\n    const response = await fetch(`${API_BASE_URL}/solicitudes/${idSolicitud}/aprobar`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(aprobacion),\r\n    });\r\n    if (!response.ok) return response.json();\r\n    return response.json();\r\n}\r\n\r\n// ==================== USUARIOS ====================\r\n\r\n// Consultar todos los usuarios\r\nexport async function apiConsultarUsuarios(token) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Consultar usuario individual\r\nexport async function apiConsultarUsuario(idUsuario, token) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/${idUsuario}/`, {\r\n        headers: { 'Authorization': 'Basic ' + token },\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Cambiar password\r\nexport async function apiCambiarPassword(idUsuario, cambioPassword, token) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/${idUsuario}/cambiarPassword`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(cambioPassword),\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Cambiar correo\r\nexport async function apiCambiarCorreo(idUsuario, cambioCorreo, token) {\r\n    const response = await fetch(`${API_BASE_URL}/usuarios/${idUsuario}/cambiarCorreo`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Basic ' + token,\r\n        },\r\n        body: JSON.stringify(cambioCorreo),\r\n    });\r\n    if (!response.ok) throw new Error(await response.text());\r\n    return response.json();\r\n}\r\n\r\n// Ejemplo de guardado correcto tras login exitoso\r\nconst handleLogin = async () => {\r\n    // ... tu lógica de autenticación ...\r\n    // Supón que recibes esto del backend:\r\n    // { token, nombre, rol }\r\n    localStorage.setItem('authToken', token);\r\n    localStorage.setItem('userProfile', JSON.stringify({\r\n        nombre: nombre, // o el campo que recibas del backend\r\n        rol: rol        // debe ser 'admin' para ver el botón\r\n    }));\r\n    // ...redirige o actualiza estado...\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}